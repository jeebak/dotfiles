[alias]
  a             = add
  al            = !git config --list | grep '^alias\\.' | sed 's/^alias\\.\\([^=]*\\)=\\(.*\\)/ \\1\\\t => \\2/' | column -s'\t' -t | sort | less -NS
  ap            = add -p
  b             = branch -vv
  co            = checkout
  #confed        = !${GIT_EDITOR:-vim} ~/.gitconfig $(git config --get-all include.path | sed "s;~;$HOME;g")
  d             = diff
  dno           = diff --name-only
  dns           = diff --name-status
  # Default diff behavior. Useful, for example, for drupal patches.
  defdiff       = diff --src-prefix=a/ --dst-prefix=b/
  dw            = diff --word-diff
  exec          = "!exec "
                  # OSX [[ good, Ubuntu, [ ...
  # Since, 'am' is so short... Usage: git fp -1 hash # for just the changes in this ONE commit
  fp            = format-patch
  gcap          = "!bash -c 'du -hs \"$(git groot)\"' && git reflog expire --expire=now --all && git gc --aggressive --prune=now && bash -c 'du -hs \"$(git groot)\"'"
  get           = "!bash -c \"if command -v ghq > /dev/null 2>&1; then ghq get -u $1; else echo ghq not found; fi\""
  h             = help

  hb-gelfling   = !~/Projects/hb-gelfling/main.sh
  # This duplicates 'it' but seems necessary vs. calling: git it w/in this alias
  iac           = !cd ${GIT_PREFIX:-.} && git --git-dir=$PWD/.git --work-tree=$PWD init . && git --git-dir=$PWD/.git --work-tree=$PWD commit -m 'Empty root' --allow-empty && git --git-dir=$PWD/.git --work-tree=$PWD add . && git --git-dir=$PWD/.git --work-tree=$PWD commit -m 'Initial commit'
  l             = log
  lc            = "!sh -c 'git log --committer=\"$1\"' -"
  lg            = !"git tree"
  lno           = log --name-only
  lns           = log --name-status
  lp            = log -p
  lpw           = log -p --word-diff
  ls            = log --stat
  ls-br         = "!f() { git ls-tree --name-only -r \"$@\"; }; f"
  ls-dirs       = "!f() { git ls-files \"$@\" | grep '/' | sed 's|/[^/][^/]*$||' | sort -u; }; f"
  ls-grep       = "!f() { git ls-files | grep \"$@\"; }; f"
  ls-ignored    = ls-files --exclude-standard --ignored --others

  pgap          = !OLD_HEAD="$(git rev-parse HEAD)" && [ ! -z "$(git remote)" ] && git pull && NEW_HEAD="$(git rev-parse HEAD)" && [ "$OLD_HEAD" != "$NEW_HEAD" ] && git gc --aggressive --prune=now

  rpo           = remote prune origin

  sanity        = "!for i in $(git status --porcelain | grep -v -e '^ *D' -e '^ *??' | cut -d ' ' -f 3-); do case \"$i\" in *.php|*.install|*.inc) echo \"Working on: $i\";  php -l \"$i\";; *.js) echo \"Working on: $i\"; jshint \"$i\";; *.css) echo \"Working on: $i\"; csslint \"$i\";; esac; done"
  sanity-php    = "!for i in $(git status --porcelain | grep -v -e '^ *D' -e '^ *??' | cut -d ' ' -f 3-); do case \"$i\" in *.php|*.install|*.inc) echo \"Working on: $i\";  php -l \"$i\";; esac; done"
  sanity-js     = "!for i in $(git status --porcelain | grep -v -e '^ *D' -e '^ *??' | cut -d ' ' -f 3-); do case \"$i\" in *.js)                  echo \"Working on: $i\";  jshint \"$i\";; esac; done"
  sanity-css    = "!for i in $(git status --porcelain | grep -v -e '^ *D' -e '^ *??' | cut -d ' ' -f 3-); do case \"$i\" in *.js)                  echo \"Working on: $i\"; csslint \"$i\";; esac; done"

  spp           = !git stash && git pull && git stash pop
  st            = stash
# ------------------------------------------------------------------------------
# http://justinfrench.com/notebook/git-aliases-rock

# http://travisjeffery.com/b/2012/02/search-a-git-repo-like-a-ninja/ Works with [grep] above
  g             = grep --break --heading --line-number
# http://stackoverflow.com/questions/2517339/git-how-to-recover-the-file-permissions-git-thinks-the-file-should-be
  permission-reset = !git diff -p -R | grep -E \"^(diff|(old|new) mode)\" | git apply
# https://hackernoon.com/lesser-known-git-commands-151a1918a60
  # Git’s --force-with-lease option is far more polite: it checks that your
  # local copy of the ref that you’re overwriting is up-to-date before
  # overwriting it. This indicates that you’ve at least fetched the changes
  # you’re about to stomp.
  please = push --force-with-lease
  # quietly tacks any staged files onto the last commit you created, re-using
  # your existing commit message.
  commend = commit --amend --no-edit
  # The first commit of a repository can not be rebased like regular commits,
  # so it’s good practice to create an empty commit as your repository root.
  # CUSTOMIZED to work in a subfolder of another git repo
  #     Need to cd if we want a new git repo w/in an ignored subfolder
  it = !cd ${GIT_PREFIX:-.} && git --git-dir=$PWD/.git --work-tree=$PWD init . && git --git-dir=$PWD/.git --work-tree=$PWD commit -m 'Empty root' --allow-empty
  # variations of git stash, based on which bits of your work tree you need to
  # stash:
  # stash only unstaged changes to tracked files
  stsh = stash --keep-index
  # stash untracked and tracked files
  staash = stash --include-untracked
  # stash ignored, untracked, and tracked files
  staaash = stash --all
  # concise git status
  shorty = status --short --branch
  st = status --short --branch
  # If you’re using a standard non-rebasing branching workflow, running a
  # standard git merge to combine feature branches with master is actually not
  # ideal. With no options, git merge uses the --ff merge strategy, which will
  # only create a merge commit if there are no new changes on the master
  # branch, otherwise it simply “fast forwards” your master branch to point at
  # the latest commit on your feature branch. Only sometimes creating a merge
  # commit makes it tricky to reason about which code was developed on which
  # branches when looking through your git history.
  merc = merge --no-ff
  # Graphical Log
  grog = log --graph --abbrev-commit --decorate --all --format=format:\"%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)\"
# http://chneukirchen.org/blog/archive/2013/01/a-grab-bag-of-git-tricks.html
  news          = log -p HEAD@{1}..HEAD@{0}
  occur         = log -S
  oldest-ancestor = !zsh -c 'diff --old-line-format='' --new-line-format='' <(git rev-list --first-parent "${1:-master}") <(git rev-list --first-parent "${2:-HEAD}") | head -1' -
  rb            = rebase
  rbi           = rebase --interactive
# http://gitready.com/intermediate/2009/02/09/reflog-your-safety-net.html
  rl            = reflog --stat
  groot         = rev-parse --git-dir
  root          = rev-parse --show-toplevel
  sh            = show
  shno          = show --name-only
  shns          = show --name-status
  s             = status
# http://blogs.atlassian.com/2014/10/advanced-git-aliases/
  bclean        = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r git branch -d; }; f"
  new           = !sh -c 'git log $1@{1}..$1@{0} "$@"'
  sortdiff      = !sh -c 'git diff "$@" | grep "^[+-]" | sort --key=1.2 | uniq -u -s1 | colordiff'
  # Presumes: EXCLUDED line in:
  # [core]
  #   excludesfile    = ~/.config/dotfiles/git/excludesfile.conf
# http://haacked.com/archive/2014/07/28/github-flow-aliases/
  up            = !git pull --rebase --prune $@ && git submodule update --init --recursive
  wipe          = "!f() { rev=$(git rev-parse ${1-HEAD}); git add -A && git commit --allow-empty -qm 'WIPE SAVEPOINT' && git reset $rev --hard; }; f"
# http://stackoverflow.com/questions/822811/differences-in-git-branches
# http://www.jukie.net/bart/blog/pimping-out-git-log
# http://stackoverflow.com/questions/1057564/pretty-git-branch-graphs
  lg1           = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ai)%C(reset) %C(white)%s%C(reset) %C(dim white)- %ae%C(reset)%C(bold yellow)%d%C(reset)'
  lg2           = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
  lg3           = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  lg4           = log --graph --pretty=format:'%Cred%h%Creset %an: %s - %Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset'      --abbrev-commit --date=relative
  lg5           = log --graph --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset'
  lgnocolor     = log --graph --abbrev-commit --decorate --date=relative --format=format:'%h - (%ar) %s - %an%d'
# http://stackoverflow.com/questions/1057564/pretty-git-branch-graphs/15562953#15562953
  tree          = !"git forest --pretty=format:\"%C(red)%h %C(magenta)(%ar) %C(blue)%an %C(reset)%s\" --style=15 | ${GIT_PAGER:-less}"
# ------------------------------------------------------------------------------
# http://gitready.com/advanced/2011/10/21/ribbon-and-catchup-reading-new-commits.html
#  ribbon = tag --force _ribbon origin/master
#  catchup = log --patch --reverse --topo-order _ribbon..origin/master

  # SVN convenience aliases
#  sfetch  = !git stash && git svn fetch   && git stash pop && git prune && echo "SUCCESS: sfetch"  || echo "FAILURE: sfetch"
#  srebase = !git stash && git svn rebase  && git stash pop && git prune && echo "SUCCESS: srebase" || echo "FAILURE: srebase"
#  spush   = !git stash && git svn dcommit && git stash pop && git prune && echo "SUCCESS: spush"   || echo "FAILURE: spush"

  # https://git.wiki.kernel.org/index.php/Aliases#alias
#  graphviz = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"
# ------------------------------------------------------------------------------
  # just a repeat of some 'git log' options to get familiarized w/ the real
  # options. zsh completion lists these aliases.

#  log-abbrev-commit   # Show only the first few characters of the SHA-1 checksum instead of all 40.
#  log-relative-date   # Display the date in a relative format (for example, “2 weeks ago”) instead of using the full date format.
#  log-pretty          # Show commits in an alternate format. Options include oneline, short, full, fuller, and format (where you specify your own format).
#  log-(n)              # Show only the last n commits
#  log-since           # Limit the commits to those made after the specified date.
#  log-after
#  log-until           # Limit the commits to those made before the specified date.
#  log-before
#  log-author          # Only show commits in which the author entry matches the specified string.

#  lsc                 = ls-files -c # --cached # Show cached files in the output (default)
#  lsd                 = ls-files -d # --deleted # Show deleted files in the output
#  lsm                 = ls-files -m # --modified # Show modified files in the output
#  lso                 = ls-files -o # --others Show other (i.e. untracked) files in the output
#  lsi                 = ls-files -i # --ignored Show only ignored files in the output. When showing files in the index, print only those matched by an exclude pattern. When showing "other" files, show only those matched by an exclude pattern.
#  lss                 = ls-files -s # --stage Show staged contents' object name, mode bits and stage number in the output.
#  lsdir               = ls-files --directory # If a whole directory is classified as "other", show just its name (with a trailing slash) and not its whole contents.
#  ls?                 = ls-files --no-empty-directory # Do not list empty directories. Has no effect without --directory.
#  lsu                 = ls-files -u # --unmerged Show unmerged files in the output (forces --stage)
#  lsk                 = ls-files -k # --killed Show files on the filesystem that need to be removed due to file/directory conflicts for checkout-index to succeed.
#  lsz                 = ls-files -z # \0 line termination on output.
#  lsx                 = ls-files -x # <pattern>, --exclude=<pattern> Skip untracked files matching pattern. Note that pattern is a shell wildcard pattern. See EXCLUDE PATTERNS below for more information.
#  lsX                 = ls-files -X # <file>, --exclude-from=<file> Read exclude patterns from <file>; 1 per line.
#  ls?                 = ls-files --exclude-per-directory=<file> Read additional exclude patterns that apply only to the directory and its subdirectories in <file>.
#  lsexcldstd          = ls-files --exclude-standard # Add the standard git exclusions: .git/info/exclude, .gitignore in each directory, and the user’s global exclusion file.
#  ls?                 = ls-files --error-unmatch # If any <file> does not appear in the index, treat this as an error (return 1).
#  ls?                 = ls-files --with-tree=<tree-ish> When using --error-unmatch to expand the user supplied <file> (i.e. path pattern) arguments to paths, pretend that paths which were removed in the index since the named <tree-ish> are still present. Using this option with -s or -u options does not make any sense.
#  ls?                 = ls-files -t              # This feature is semi-deprecated. For scripting purpose, git-status(1) --porcelain and git-diff-files(1) --name-status are almost always superior alternatives, and users should look at git-status(1) --short or git-diff(1) --name-status for more user-friendly alternatives.
#  ls?                 = ls-files -v              # Similar to -t, but use lowercase letters for files that are marked as assume unchanged (see git-update-index(1)).
#  lsfull              = ls-files --full-name     # When run from a subdirectory, the command usually outputs paths relative to the current directory. This option forces paths to be output relative to the project top directory.
#  ls?                 = ls-files --abbrev[=<n>] # Instead of showing the full 40-byte hexadecimal object lines, show only a partial prefix. Non default number of digits can be specified with --abbrev=<n>.
#  lsdebug             = ls-files --debug # After each line that describes a file, add more data about its cache entry. This is intended to show as much information as possible for manual inspection; the exact format may change at any time.

# vim:set filetype=gitconfig:
